<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="fit_roo_8_c" kind="file" language="C++">
    <compoundname>fitRoo.C</compoundname>
    <includes local="yes">RooRealVar.h</includes>
    <includes local="yes">RooDataSet.h</includes>
    <includes local="yes">RooGaussian.h</includes>
    <includes local="yes">RooPolynomial.h</includes>
    <includes local="yes">RooBreitWigner.h</includes>
    <includes local="yes">RooAddPdf.h</includes>
    <includes local="yes">RooAbsPdf.h</includes>
    <includes local="yes">RooGenericPdf.h</includes>
    <includes local="yes">TCanvas.h</includes>
    <includes local="yes">TAxis.h</includes>
    <includes local="yes">RooPlot.h</includes>
    <includes local="yes">TH1.h</includes>
    <includes local="yes">RooFitResult.h</includes>
    <includes local="yes">RooDataHist.h</includes>
    <includes local="yes">RooHist.h</includes>
    <includes local="yes">TRootCanvas.h</includes>
    <includes local="yes">TApplication.h</includes>
    <includes local="yes">TLatex.h</includes>
    <includes local="yes">TFitResult.h</includes>
    <includes local="yes">TStyle.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">filesystem</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/zenith378/Documents/Uni/Computing/Y-DiMuonResonances/YFit/src/fitRoo.C</label>
        <link refid="fit_roo_8_c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>RooAbsPdf.h</label>
      </node>
      <node id="7">
        <label>RooAddPdf.h</label>
      </node>
      <node id="6">
        <label>RooBreitWigner.h</label>
      </node>
      <node id="15">
        <label>RooDataHist.h</label>
      </node>
      <node id="3">
        <label>RooDataSet.h</label>
      </node>
      <node id="14">
        <label>RooFitResult.h</label>
      </node>
      <node id="4">
        <label>RooGaussian.h</label>
      </node>
      <node id="9">
        <label>RooGenericPdf.h</label>
      </node>
      <node id="16">
        <label>RooHist.h</label>
      </node>
      <node id="12">
        <label>RooPlot.h</label>
      </node>
      <node id="5">
        <label>RooPolynomial.h</label>
      </node>
      <node id="2">
        <label>RooRealVar.h</label>
      </node>
      <node id="18">
        <label>TApplication.h</label>
      </node>
      <node id="11">
        <label>TAxis.h</label>
      </node>
      <node id="10">
        <label>TCanvas.h</label>
      </node>
      <node id="20">
        <label>TFitResult.h</label>
      </node>
      <node id="13">
        <label>TH1.h</label>
      </node>
      <node id="19">
        <label>TLatex.h</label>
      </node>
      <node id="17">
        <label>TRootCanvas.h</label>
      </node>
      <node id="21">
        <label>TStyle.h</label>
      </node>
      <node id="23">
        <label>filesystem</label>
      </node>
      <node id="22">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="fit_roo_8_c_1a3486da7fabe684039983850799d99617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string formatPtString</definition>
        <argsstring>(int &amp;dr, float &amp;pmr, float &amp;pMr)</argsstring>
        <name>formatPtString</name>
        <param>
          <type>int &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>pmr</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>pMr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formatting the string to be displayed on the canvas regarding the cuts made on pt</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dr</parametername>
</parameternamelist>
<parameterdescription>
<para>reference of depth defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmr</parametername>
</parameternamelist>
<parameterdescription>
<para>recerence of ptm (minimum pt) defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pMr</parametername>
</parameternamelist>
<parameterdescription>
<para>recerence of ptM (maximum pt) defined in main</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the fit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/zenith378/Documents/Uni/Computing/Y-DiMuonResonances/YFit/src/fitRoo.C" line="26" column="13" bodyfile="/Users/zenith378/Documents/Uni/Computing/Y-DiMuonResonances/YFit/src/fitRoo.C" bodystart="26" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="fit_roo_8_c_1a47519f963af9cc34c19ff7d6f465dc6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string formatYString</definition>
        <argsstring>(int &amp;dr, float &amp;ymr, float &amp;yMr)</argsstring>
        <name>formatYString</name>
        <param>
          <type>int &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>ymr</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>yMr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formatting the string to be displayed on the canvas regarding the cuts made on y</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dr</parametername>
</parameternamelist>
<parameterdescription>
<para>reference of depth defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ymr</parametername>
</parameternamelist>
<parameterdescription>
<para>recerence of ym (minimum rapidity) defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yMr</parametername>
</parameternamelist>
<parameterdescription>
<para>recerence of yM (maximum rapidity) defined in main</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the fit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/zenith378/Documents/Uni/Computing/Y-DiMuonResonances/YFit/src/fitRoo.C" line="46" column="13" bodyfile="/Users/zenith378/Documents/Uni/Computing/Y-DiMuonResonances/YFit/src/fitRoo.C" bodystart="46" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="fit_roo_8_c_1a8a9508331d97be33788890aa55dc1dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RooFitResult *</type>
        <definition>RooFitResult * fitRoo</definition>
        <argsstring>(TH1 *hh, int &amp;fr, int &amp;dr, float &amp;pmr, float &amp;pMr, float &amp;ymr, float &amp;yMr, std::string &amp;nfr, int &amp;vr)</argsstring>
        <name>fitRoo</name>
        <param>
          <type>TH1 *</type>
          <declname>hh</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>fr</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>pmr</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>pMr</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>ymr</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>yMr</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>fnr</declname>
          <defname>nfr</defname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>vr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implementation of the fit function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hh</parametername>
</parameternamelist>
<parameterdescription>
<para>histogram to be fitted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fr</parametername>
</parameternamelist>
<parameterdescription>
<para>reference of fitFunction defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dr</parametername>
</parameternamelist>
<parameterdescription>
<para>reference of depth defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmr</parametername>
</parameternamelist>
<parameterdescription>
<para>recerence of ptm (minimum pt) defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pMr</parametername>
</parameternamelist>
<parameterdescription>
<para>recerence of ptM (maximum pt) defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ymr</parametername>
</parameternamelist>
<parameterdescription>
<para>recerence of ym (minimum rapidity) defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yMr</parametername>
</parameternamelist>
<parameterdescription>
<para>recerence of yM (maximum rapidity) defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nfr</parametername>
</parameternamelist>
<parameterdescription>
<para>recerence of nameFile defined in main </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vr</parametername>
</parameternamelist>
<parameterdescription>
<para>reference of varaible verbose defined in main</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the fit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/zenith378/Documents/Uni/Computing/Y-DiMuonResonances/YFit/src/fitRoo.C" line="68" column="14" bodyfile="/Users/zenith378/Documents/Uni/Computing/Y-DiMuonResonances/YFit/src/fitRoo.C" bodystart="68" bodyend="290"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;RooRealVar.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooDataSet.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooGaussian.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooPolynomial.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooBreitWigner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooAddPdf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooAbsPdf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooGenericPdf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TCanvas.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TAxis.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooPlot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TH1.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooFitResult.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooDataHist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RooHist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TRootCanvas.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TApplication.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TLatex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TFitResult.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TStyle.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;filesystem&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">RooFit;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">std::string<sp/><ref refid="fit_roo_8_c_1a3486da7fabe684039983850799d99617" kindref="member">formatPtString</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;dr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;pmr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;pMr)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pmr<sp/>==<sp/>pmr<sp/>&amp;&amp;<sp/>pMr<sp/>==<sp/>pMr)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>std::to_string((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)pmr)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>p_{T}&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)pMr)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>GeV&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pmr<sp/>==<sp/>pmr<sp/>&amp;&amp;<sp/>pMr<sp/>!=<sp/>pMr)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>tmp<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;p_{T}<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)pmr)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>GeV&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pmr<sp/>!=<sp/>pmr<sp/>&amp;&amp;<sp/>pMr<sp/>==<sp/>pMr)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>tmp<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;p_{T}&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)pMr)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>GeV&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pmr<sp/>!=<sp/>pmr<sp/>&amp;&amp;<sp/>pMr<sp/>!=<sp/>pMr)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dr<sp/>==<sp/>1<sp/>||<sp/>dr<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>&lt;<sp/>p_{T}&lt;<sp/>100<sp/>GeV&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">std::string<sp/><ref refid="fit_roo_8_c_1a47519f963af9cc34c19ff7d6f465dc6c" kindref="member">formatYString</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;dr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;ymr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;yMr)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ymr<sp/>==<sp/>ymr<sp/>&amp;&amp;<sp/>yMr<sp/>==<sp/>yMr)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>std::to_string(ymr).substr(0,<sp/>std::to_string(ymr).find(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>+<sp/>2<sp/>+<sp/>1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>|y|<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(yMr).substr(0,<sp/>std::to_string(yMr).find(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>+<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ymr<sp/>==<sp/>ymr<sp/>&amp;&amp;<sp/>yMr<sp/>!=<sp/>yMr)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>tmp<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|y|<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ymr).substr(0,<sp/>std::to_string(ymr).find(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>+<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ymr<sp/>!=<sp/>ymr<sp/>&amp;&amp;<sp/>yMr<sp/>==<sp/>yMr)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>tmp<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;|y|<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(yMr).substr(0,<sp/>std::to_string(yMr).find(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>+<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ymr<sp/>!=<sp/>ymr<sp/>&amp;&amp;<sp/>yMr<sp/>!=<sp/>yMr)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dr<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;|y|<sp/>&lt;<sp/>0.6&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">RooFitResult<sp/>*<ref refid="fit_roo_8_c_1a8a9508331d97be33788890aa55dc1dd7" kindref="member">fitRoo</ref>(TH1<sp/>*hh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;fr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;dr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;pmr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;pMr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;ymr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;yMr,<sp/>std::string<sp/>&amp;nfr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;vr)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>observable<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>x(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;m_{#mu^{+}#mu^{-}}<sp/>(GeV/c^{2})&quot;</highlight><highlight class="normal">,<sp/>8.5001,<sp/>11.5);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>RooDataHist<sp/>rh(</highlight><highlight class="stringliteral">&quot;rh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rh&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>Import(*hh));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>application<sp/>to<sp/>display<sp/>the<sp/>canvas<sp/>while<sp/>root<sp/>runs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TApplication<sp/>*theApp<sp/>=<sp/>new<sp/>TApplication(&quot;app&quot;,<sp/>0,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//numero<sp/>di<sp/>eventi<sp/>dentro<sp/>all&apos;istogramma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>entries<sp/>=<sp/>hh-&gt;GetEntries();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>nback(</highlight><highlight class="stringliteral">&quot;nback&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nback&quot;</highlight><highlight class="normal">,<sp/>0.2*entries,<sp/>0.01,<sp/>entries);<sp/></highlight><highlight class="comment">//0.32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>nb<sp/>=<sp/>hh-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>x1<sp/>=<sp/>hh-&gt;GetBinCenter(1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>x9<sp/>=<sp/>hh-&gt;GetBinCenter(nb);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>i1<sp/>=<sp/>hh-&gt;FindBin(x1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>i9<sp/>=<sp/>hh-&gt;FindBin(x9);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>n1<sp/>=<sp/>hh-&gt;GetBinContent(i1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>n9<sp/>=<sp/>hh-&gt;GetBinContent(i9);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>slp<sp/>=<sp/>(n9-n1)/(x9-x1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>bg<sp/>=<sp/>n1<sp/>-<sp/>slp*x1;<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/><sp/><sp/>component<sp/><sp/><sp/>pdfs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>polynomial<sp/>pdf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>a0(</highlight><highlight class="stringliteral">&quot;a0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a0&quot;</highlight><highlight class="normal">,<sp/>bg,<sp/>0,<sp/>5000);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>a1(</highlight><highlight class="stringliteral">&quot;a1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a1&quot;</highlight><highlight class="normal">,<sp/>slp,<sp/>-500.,<sp/>500.);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>a2(</highlight><highlight class="stringliteral">&quot;a2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a2&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>-30.,<sp/>30.);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>RooPolynomial<sp/>bkg(</highlight><highlight class="stringliteral">&quot;bkg&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Background&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>RooArgSet(a0,<sp/>a1,<sp/>a2));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>mean1(</highlight><highlight class="stringliteral">&quot;mean1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mean<sp/>of<sp/>gaussians&quot;</highlight><highlight class="normal">,<sp/>9.45,<sp/>9.3,<sp/>9.6);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>mean2(</highlight><highlight class="stringliteral">&quot;mean2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mean<sp/>of<sp/>gaussians&quot;</highlight><highlight class="normal">,<sp/>10.01,<sp/>9.8,<sp/>10.2);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>mean3(</highlight><highlight class="stringliteral">&quot;mean3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mean<sp/>of<sp/>gaussians&quot;</highlight><highlight class="normal">,<sp/>10.35,<sp/>10.15,<sp/>10.5);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>sigma1(</highlight><highlight class="stringliteral">&quot;sigma1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;width<sp/>of<sp/>gaussians&quot;</highlight><highlight class="normal">,<sp/>0.054,<sp/>0.01,<sp/>0.5);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>sigma2(</highlight><highlight class="stringliteral">&quot;sigma2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;width<sp/>of<sp/>gaussians&quot;</highlight><highlight class="normal">,<sp/>0.032,<sp/>0.01,<sp/>0.5);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>sigma3(</highlight><highlight class="stringliteral">&quot;sigma3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;width<sp/>of<sp/>gaussians&quot;</highlight><highlight class="normal">,<sp/>0.020,<sp/>0.01,<sp/>0.5);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>r1(</highlight><highlight class="stringliteral">&quot;r1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r1&quot;</highlight><highlight class="normal">,<sp/>10,<sp/>0.00,<sp/>100);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>r2(</highlight><highlight class="stringliteral">&quot;r2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r2&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>0.00,<sp/>100);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>r3(</highlight><highlight class="stringliteral">&quot;r3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r3&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>0.00,<sp/>100);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>RooAbsPdf<sp/>*sig1;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>RooAbsPdf<sp/>*sig2;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>RooAbsPdf<sp/>*sig3;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>nsig1(</highlight><highlight class="stringliteral">&quot;nsig1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;signal1&quot;</highlight><highlight class="normal">,<sp/>0.32*entries,<sp/>0.01,<sp/>entries);<sp/></highlight><highlight class="comment">//0.32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>nsig2(</highlight><highlight class="stringliteral">&quot;nsig2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;signal2&quot;</highlight><highlight class="normal">,<sp/>0.21*entries,<sp/>0.01,<sp/>entries);<sp/></highlight><highlight class="comment">//0.21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>RooRealVar<sp/>nsig3(</highlight><highlight class="stringliteral">&quot;nsig3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;signal3&quot;</highlight><highlight class="normal">,<sp/>0.22*entries,<sp/>0.01,<sp/>entries);<sp/></highlight><highlight class="comment">//0.22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(fr)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>Breit-Wigner&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RooBreitWigner(</highlight><highlight class="stringliteral">&quot;sig1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>component<sp/>1&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>mean1,<sp/>sigma1);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RooBreitWigner(</highlight><highlight class="stringliteral">&quot;sig2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>component<sp/>2&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>mean2,<sp/>sigma2);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RooBreitWigner(</highlight><highlight class="stringliteral">&quot;sig3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>component<sp/>3&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>mean3,<sp/>sigma3);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>gaus&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RooGaussian(</highlight><highlight class="stringliteral">&quot;sig1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>component<sp/>1&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>mean1,<sp/>sigma1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RooGaussian(</highlight><highlight class="stringliteral">&quot;sig2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>component<sp/>2&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>mean2,<sp/>sigma2);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RooGaussian(</highlight><highlight class="stringliteral">&quot;sig3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>component<sp/>3&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>mean3,<sp/>sigma3);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tstudent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RooGenericPdf(</highlight><highlight class="stringliteral">&quot;sig1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;((exp(lgamma((r1+1)/2.0)-lgamma(r1/2.0)))/(sqrt((22/7)*r1)*sigma1))*pow((1+(((x-mean1)/sigma1)*((x-mean1)/sigma1))/r1),-(r1+1)/2.0)&quot;</highlight><highlight class="normal">,<sp/>RooArgList(x,<sp/>r1,<sp/>mean1,<sp/>sigma1));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RooGenericPdf(</highlight><highlight class="stringliteral">&quot;sig2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;((exp(lgamma((r2+1)/2.0)-lgamma(r2/2.0)))/(sqrt((22/7)*r2)*sigma2))*pow((1+(((x-mean2)/sigma2)*((x-mean2)/sigma2))/r2),-(r2+1)/2.0)&quot;</highlight><highlight class="normal">,<sp/>RooArgList(x,<sp/>r2,<sp/>mean2,<sp/>sigma2));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RooGenericPdf(</highlight><highlight class="stringliteral">&quot;sig3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;((exp(lgamma((r3+1)/2.0)-lgamma(r3/2.0)))/(sqrt((22/7)*r3)*sigma3))*pow((1+(((x-mean3)/sigma3)*((x-mean3)/sigma3))/r3),-(r3+1)/2.0)&quot;</highlight><highlight class="normal">,<sp/>RooArgList(x,<sp/>r3,<sp/>mean3,<sp/>sigma3));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>RooAddPdf<sp/>model(</highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">,<sp/>RooArgList(*sig1,<sp/>*sig2,<sp/>*sig3,<sp/>bkg),<sp/>RooArgList(nsig1,<sp/>nsig2,<sp/>nsig3,<sp/>nback));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>RooFitResult<sp/>*fitResult;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vr<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitResult<sp/>=<sp/>model.fitTo(rh,<sp/>Verbose(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>Warnings(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>Save(),RecoverFromUndefinedRegions(1),<sp/>PrintEvalErrors(-1),<sp/>PrintLevel(-1));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vr<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitResult<sp/>=<sp/>model.fitTo(rh,<sp/>Timer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>Save(),RecoverFromUndefinedRegions(1),PrintEvalErrors(0));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>structure<sp/>of<sp/>composite<sp/>pdf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitResult-&gt;Print(</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>previous<sp/>was<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fitResult-&gt;status()!=0)<sp/></highlight><highlight class="comment">//<sp/>fitResult-&gt;covQual()<sp/>&lt;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(std::runtime_error(</highlight><highlight class="stringliteral">&quot;Fit<sp/>did<sp/>not<sp/>converge.<sp/>Try<sp/>relaxing<sp/>cut<sp/>filters<sp/>or<sp/>changing<sp/>PDF.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;msg)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>msg.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vr==0)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Set<sp/>verbose<sp/>flag<sp/>on<sp/>[-v],<sp/>in<sp/>order<sp/>to<sp/>print<sp/>the<sp/>parameters<sp/>that<sp/>have<sp/>been<sp/>updated<sp/>in<sp/>each<sp/>minimisation<sp/>step<sp/>(MINUIT<sp/>LOG).\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>RooPlot<sp/>*xframe<sp/>=<sp/>x.frame(Title(</highlight><highlight class="stringliteral">&quot;Y<sp/>Resonances<sp/>Fit&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Plot<sp/>data<sp/>and<sp/>PDF<sp/>overlaid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>rh.plotOn(xframe,<sp/>MarkerStyle(6),<sp/>MarkerSize(1));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overlay<sp/>the<sp/>background<sp/>component<sp/>of<sp/>model<sp/>with<sp/>a<sp/>dashed<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>model.plotOn(xframe,<sp/>Components(bkg),<sp/>LineColor(41),<sp/>LineStyle(kDashed));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overlay<sp/>the<sp/>sig1<sp/>components<sp/>of<sp/>model<sp/>with<sp/>a<sp/>dashed-dotted<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>model.plotOn(xframe,<sp/>Components(*sig1),<sp/>LineColor(46),<sp/>LineStyle(8));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overlay<sp/>the<sp/>background+sig2<sp/>components<sp/>of<sp/>model<sp/>with<sp/>a<sp/>long<sp/>dashed<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>model.plotOn(xframe,<sp/>Components(*sig2),<sp/>LineColor(30),<sp/>LineStyle(9));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>model.plotOn(xframe,<sp/>Components(*sig3),<sp/>LineColor(38),<sp/>LineStyle(kDotted));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>model.plotOn(xframe,<sp/>LineWidth(2),<sp/>LineColor(kRed));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>model<sp/>and<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>RooHist<sp/>*hpull<sp/>=<sp/>xframe-&gt;pullHist();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hpull-&gt;SetMarkerSize(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;SetMarkerStyle(6);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;SetLineWidth(0);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>the<sp/>frame<sp/>on<sp/>the<sp/>canvas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>TCanvas<sp/>*<sp/>c1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;Fit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>Resonances<sp/>Fit&quot;</highlight><highlight class="normal">,<sp/>950,<sp/>800);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TRootCanvas<sp/>*rc<sp/>=<sp/>(TRootCanvas<sp/>*)c1-&gt;GetCanvasImp();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//rc-&gt;Connect(&quot;CloseWindow()&quot;,<sp/>&quot;TApplication&quot;,<sp/>gApplication,<sp/>&quot;Terminate()&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>TPad<sp/>*pad1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TPad(</highlight><highlight class="stringliteral">&quot;pad1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>pad<sp/>80<sp/>of<sp/>the<sp/>height&quot;</highlight><highlight class="normal">,<sp/>0.0,<sp/>0.2,<sp/>1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>TPad<sp/>*pad2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TPad(</highlight><highlight class="stringliteral">&quot;pad2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>pad<sp/>20<sp/>of<sp/>the<sp/>height&quot;</highlight><highlight class="normal">,<sp/>0.0,<sp/>0.05,<sp/>1.0,<sp/>0.25);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>pad1-&gt;Draw();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>pad2-&gt;Draw();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>pad1-&gt;cd();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>xframe-&gt;GetYaxis()-&gt;SetTitleOffset(1.5);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>xframe-&gt;GetXaxis()-&gt;SetTitleSize(0);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>xframe-&gt;GetXaxis()-&gt;SetLabelSize(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>xframe-&gt;GetXaxis()-&gt;SetTitleOffset(999);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>xframe-&gt;SetMinimum(0.001);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>xframe-&gt;Draw();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cut1<sp/>=<sp/><ref refid="fit_roo_8_c_1a3486da7fabe684039983850799d99617" kindref="member">formatPtString</ref>(dr,<sp/>pmr,<sp/>pMr);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cut2<sp/>=<sp/><ref refid="fit_roo_8_c_1a47519f963af9cc34c19ff7d6f465dc6c" kindref="member">formatYString</ref>(dr,<sp/>ymr,<sp/>yMr);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>TLatex<sp/>label;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>label.SetNDC(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>cambio<sp/>di<sp/>coordinate<sp/>di<sp/>riferimento<sp/>da<sp/>quelle<sp/>del<sp/>grafico<sp/>a<sp/>quelle<sp/>del<sp/>pad<sp/>normalizzate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>label.SetTextSize(0.05);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>label.SetTextAlign(22);<sp/></highlight><highlight class="comment">//<sp/>central<sp/>vertically<sp/>and<sp/>horizontally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>label.DrawLatex(0.75,<sp/>0.8,<sp/>(</highlight><highlight class="stringliteral">&quot;#bf{&quot;</highlight><highlight class="normal"><sp/>+<sp/>cut1<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>label.DrawLatex(0.75,<sp/>0.7,<sp/>(</highlight><highlight class="stringliteral">&quot;#bf{&quot;</highlight><highlight class="normal"><sp/>+<sp/>cut2<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>label.SetTextSize(0.04);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>label.SetTextAlign(11);<sp/></highlight><highlight class="comment">//<sp/>left<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>label.DrawLatex(0.10,<sp/>0.92,<sp/></highlight><highlight class="stringliteral">&quot;#bf{CMS<sp/>Open<sp/>Data}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>label.SetTextAlign(31);<sp/></highlight><highlight class="comment">//<sp/>right<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>label.DrawLatex(0.90,<sp/>0.92,<sp/></highlight><highlight class="stringliteral">&quot;11.6<sp/>fb^{-1}<sp/>(8<sp/>TeV)&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//#sqrt{s}<sp/>=<sp/>8<sp/>TeV,<sp/>L_{int}<sp/>=<sp/>11.6<sp/>fb^{-1}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>label.Draw();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>pad2-&gt;cd();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>pad2-&gt;SetBottomMargin(0.4);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetYaxis()-&gt;SetNdivisions(6);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetXaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetXaxis()-&gt;SetRangeUser(8.51,<sp/>11.49);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Pull&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;m_{#mu^{+}#mu^{-}}<sp/>[GeV]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetXaxis()-&gt;SetLabelFont(43);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetXaxis()-&gt;SetLabelSize(21);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetYaxis()-&gt;SetLabelFont(43);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetYaxis()-&gt;SetLabelSize(21);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetXaxis()-&gt;SetTitleSize(21);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetXaxis()-&gt;SetTitleFont(43);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetYaxis()-&gt;SetTitleSize(21);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;GetYaxis()-&gt;SetTitleFont(43);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>hpull-&gt;Draw();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>c1-&gt;Update();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fs<sp/>=<sp/>std::filesystem;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;./Plots/&quot;</highlight><highlight class="normal"><sp/>+<sp/>nfr<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.pdf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname<sp/>=<sp/>tmp.c_str();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1-&gt;SaveAs(fname);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fs::is_directory(</highlight><highlight class="stringliteral">&quot;./Plots&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!fs::exists(</highlight><highlight class="stringliteral">&quot;./Plots&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;./Plots&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pathToData)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Directory<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pathToData<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>exist.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>directory...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs::create_directory(pathToData);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Directory<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pathToData<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>successfully<sp/>created\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//theApp-&gt;Run();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fitResult;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/zenith378/Documents/Uni/Computing/Y-DiMuonResonances/YFit/src/fitRoo.C"/>
  </compounddef>
</doxygen>
